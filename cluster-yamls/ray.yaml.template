# An unique identifier for the head node and workers of this cluster.
cluster_name: memory

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: {num_workers}

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: {num_workers}

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-west-2
    availability_zone: us-west-2a
    cache_stopped_nodes: True

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below.
#    ssh_private_key: /path/to/your/key.pem

    # Additional options in the boto docs.

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    ray.head.default:
        # The minimum number of worker nodes of this type to launch.
        # This number should be >= 0.
        min_workers: 0
        # The maximum number of worker nodes of this type to launch.
        # This takes precedence over min_workers.
        max_workers: 0
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: m5.4xlarge
            ImageId: ami-09537816836800b98
            # You can provision additional disk space with a conf as follows
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 200
            # Additional options in the boto docs.
    ray.worker.default:
        # The minimum number of worker nodes of this type to launch.
        # This number should be >= 0.
        min_workers: {num_workers}
        # The maximum number of worker nodes of this type to launch.
        # This takes precedence over min_workers.
        max_workers: {num_workers}
        # The node type's CPU and GPU resources are auto-detected based on AWS instance type.
        # If desired, you can override the autodetected CPU and GPU resources advertised to the autoscaler.
        # You can also set custom resources.
        # For example, to mark a node type as having 1 CPU, 1 GPU, and 5 units of a resource called "custom", set
        # resources: {"CPU": 1, "GPU": 1, "custom": 5}
        resources: {}
        # Provider-specific config for this node type, e.g. instance type. By default
        # Ray will auto-configure unspecified fields such as SubnetId and KeyName.
        # For more documentation on available fields, see:
        # http://boto3.readthedocs.io/en/latest/reference/services/ec2.html#EC2.ServiceResource.create_instances
        node_config:
            InstanceType: m5.4xlarge
            ImageId: ami-09537816836800b98
            BlockDeviceMappings:
                - DeviceName: /dev/sda1
                  Ebs:
                      VolumeSize: 200
            # Run workers on spot by default. Comment this out to use on-demand.
            #InstanceMarketOptions:
            #    MarketType: spot
                # Additional options can be found in the boto docs, e.g.
                #   SpotOptions:
                #       MaxPrice: MAX_HOURLY_PRICE
            # Additional options in the boto docs.

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
    "/home/ubuntu/ray": "/home/swang/ray-empty",
#    "/path2/on/remote/machine": "/path2/on/local/machine",
}

rsync_exclude: []
rsync_filter: []

# List of shell commands to run to set up nodes.
setup_commands:
    - pip install -r ray/python/requirements.txt || true
    - echo set-window-option -g mode-mouse on > ~/.tmux.conf - echo 'termcapinfo xterm* ti@:te@' > ~/.screenrc
    - '[ -z "$RAY_HEAD_IP" ] && echo "On driver node" || echo "On worker node"'
    - cd ray/ ; [ -z "$RAY_HEAD_IP" ] && (git checkout -- . && git fetch && git checkout origin/memory-profiling) || true

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - source activate ray-master && ray stop -f
    - ulimit -n 65536; RAY_BACKEND_LOG_LEVEL=debug source activate ray-master && ray start --head --port=6379 --autoscaling-config=~/ray_bootstrap_config.yaml --system-config='{"lineage_pinning_enabled":true,"task_retry_delay_ms":0,"worker_lease_timeout_milliseconds":0,"object_spilling_threshold":2}' --object-store-memory {object_store_memory}

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - source activate ray-master && ray stop -f
    - ulimit -n 65536; RAY_BACKEND_LOG_LEVEL=debug source activate ray-master && ray start --address=$RAY_HEAD_IP:6379 --object-store-memory {object_store_memory}
